{"version":3,"sources":["axios_func.js","Row.js","request.js","Banner.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","useState","state","setstate","useEffect","a","get","requestt","data","results","fetchTheData","className","map","movie","key","id","src","poster_path","alt","MY_KEY","REQUESTS","fetchMovies","fetchGenre","fetchPopular","fetchKidMovies","console","log","Banner","Math","floor","random","fetchData_banner","style","width","backgroundSize","backgroundImage","backgroundPosition","overview","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAMeA,E,OAHEC,EAAMC,OACnB,CAACC,QAAQ,iC,MCiCEC,MA9Bf,YAAiC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAAW,EAGHC,mBAAS,IAHN,mBAGtBC,EAHsB,KAGfC,EAHe,KAc5B,OAVDC,qBAAU,WAAM,4CACb,4BAAAC,EAAA,sEAC2BV,EAAMW,IAAIN,GADrC,cACUO,EADV,OAGIJ,EAASI,EAASC,KAAKC,SAH3B,kBAIWF,GAJX,4CADa,uBAAC,WAAD,wBAObG,KACA,CAACV,IAGC,yBAAKW,UAAU,OACX,wBAAIA,UAAU,cACTZ,GAEL,yBAAKY,UAAU,eAEPT,EAAMU,KAAI,SAAAC,GAAK,OAAI,yBAChBC,IAAKD,EAAME,GACVJ,UAAU,aAAaK,IAAG,UAzB/B,wCAyB+B,OAAkBH,EAAMI,aAAeC,IAAKL,EAAMd,cC9B9FoB,EAAS,mCACTC,EAAW,CAEbC,YAAY,0BAAD,OAA4BF,EAA5B,mBACXG,WAAW,0DAAD,OAA4DH,EAA5D,mBACVI,aAAa,uDAAD,OAAyDJ,EAAzD,0FACZK,eAAe,0BAAD,OAA4BL,EAA5B,qEAGlBM,QAAQC,IAAIN,EAASC,aACND,Q,MCwCAO,MA5Cf,WAAmB,IAAD,EAEY1B,mBAAS,IAFrB,mBAEPC,EAFO,KAEAC,EAFA,KAYd,OATAC,qBAAU,WAAM,4CACb,4BAAAC,EAAA,sEAC4BV,EAAMW,IAAIc,EAASC,aAD/C,OACWd,EADX,OAEKJ,EAASI,EAASC,KAAKC,QAAQmB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,IAFpE,4CADa,uBAAC,WAAD,wBAKbC,KACA,IAEHN,QAAQC,IAAIxB,GAGR,4BAAQS,UAAU,SAElBqB,MAAO,CAECC,MAAM,OACNC,eAAe,QACfC,gBAAgB,4CAAD,OAA6CjC,EAAMe,YAAnD,MACfmB,mBAAoB,YAMnC,yBAAKzB,UAAU,gBACX,6BACA,wBAAIA,UAAU,gBAAd,WAA+BT,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOH,OACvC,wBAAIY,UAAU,eAAd,OAA6BT,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAOmC,UACpC,yBAAK1B,UAAU,eACX,4BAAQA,UAAU,cAAlB,QACA,4BAAQA,UAAU,cAAlB,wB,MCCO2B,MA/Bf,WACE,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAGlB,kBAAC,EAAD,KACN,uCAMQ,kBAAC,EAAD,CAAKZ,MAAM,kBAAkBC,SAAYoB,EAASC,cAElD,kBAAC,EAAD,CAAKtB,MAAM,gBAAgBC,SAAYoB,EAASG,eAChD,kBAAC,EAAD,CAAKxB,MAAM,mBAAmBC,SAAYoB,EAASI,iBACnD,kBAAC,EAAD,CAAKzB,MAAM,eAAeC,SAAYoB,EAASI,iBAC/C,kBAAC,EAAD,CAAKzB,MAAM,kBAAkBC,SAAYoB,EAASC,cAElD,2CCjBYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.f68d93f3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create(\r\n    {baseURL:\"https://api.themoviedb.org/3\",});\r\n\r\nexport default instance;","import React from 'react'\r\nimport {useState, useEffect} from 'react';\r\nimport axios from './axios_func';\r\nimport \"./Row.css\";\r\n\r\nconst imgBaseURL = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({title, fetchUrl}) {\r\n\r\n    //def state = movie\r\n   const [state, setstate] = useState([]);\r\n   useEffect(() => {\r\n      async function fetchTheData(){\r\n          const requestt = await axios.get(fetchUrl);\r\n       //   console.log(requestt.data.results);\r\n          setstate(requestt.data.results);\r\n          return requestt;\r\n      }\r\n      fetchTheData(); \r\n   }, [fetchUrl]) ;//alwys incluede external variables since its depended on avariable outside useeffect block\r\n// console.log(state);\r\n    return (\r\n        <div className=\"row\">  \r\n            <h1 className=\"row_titles\">\r\n                {title}\r\n            </h1>\r\n            <div className=\"row_posters\">\r\n                {\r\n                    state.map(movie =>(<img \r\n                       key={movie.id}\r\n                        className=\"row_poster\" src={`${imgBaseURL}${movie.poster_path}`} alt={movie.title}></img>))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const MY_KEY = \"d24839db76c8dbcd16fadc12e2691d05\";\r\nconst REQUESTS = {\r\n\r\n    fetchMovies: `discover/movie?api_key=${MY_KEY}&language=en-US`,\r\n    fetchGenre: `https://api.themoviedb.org/3/action/movie/list?api_key=${MY_KEY}&language=en-US`,\r\n    fetchPopular: `https://api.themoviedb.org/3/discover/movie?api_key=${MY_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\r\n    fetchKidMovies: `discover/movie?api_key=${MY_KEY}&certification_country=US&certification.lte=G&sort_by=popularity`\r\n    //fetchTvSeries: 'https://api.themoviedb.org/3/tv/{tv_id}?api_key=<<api_key>>&language=en-US'\r\n}\r\nconsole.log(REQUESTS.fetchMovies);\r\nexport default REQUESTS;\r\n","import React from 'react';\r\nimport axios from './axios_func';\r\nimport REQUESTS from './request';\r\nimport {useState, useEffect} from 'react';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n\r\n    const [state, setstate] = useState([]);\r\n    useEffect(() => {\r\n       async function fetchData_banner(){\r\n            const requestt = await axios.get(REQUESTS.fetchMovies);\r\n            setstate(requestt.data.results[Math.floor(Math.random() * 6) + 1 ]);\r\n       }\r\n       fetchData_banner();\r\n    }, []);\r\n\r\n    console.log(state);\r\n    return (\r\n        \r\n        <header className=\"banner\"  \r\n        \r\n        style={{\r\n            \r\n                width:\"100%\",\r\n                backgroundSize:\"cover\",\r\n                backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${state.poster_path}\")`  ,\r\n                backgroundPosition: \"50% 10%\",\r\n            \r\n        }}\r\n        \r\n        >\r\n           \r\n <div className=\"banner_stuff\">\r\n     <div>\r\n     <h1 className=\"banner_title\"> {state?.title}</h1>\r\n    <h5 className=\"banner_desc\">{state?.overview}</h5>\r\n    <div className=\"banner_btns\">\r\n        <button className=\"banner_btn\">Play</button>\r\n        <button className=\"banner_btn\">Download poster</button>\r\n        \r\n    </div>\r\n     </div>\r\n   \r\n            </div>\r\n             \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React from 'react';\nimport Row from './Row';\nimport Banner from './Banner';\nimport REQUESTS from './request';\n\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n      <Banner>\n<h1>\n  Banner\n</h1>\n      </Banner>\n\n\n        <Row title=\"Trending Movies\" fetchUrl = {REQUESTS.fetchMovies}></Row>\n\n        <Row title=\"Action movies\" fetchUrl = {REQUESTS.fetchPopular}></Row>\n        <Row title=\"Adventure movies\" fetchUrl = {REQUESTS.fetchKidMovies}></Row>\n        <Row title=\"Drama movies\" fetchUrl = {REQUESTS.fetchKidMovies}></Row>\n        <Row title=\"Romantic movies\" fetchUrl = {REQUESTS.fetchMovies}></Row>\n\n        <h1>\n          TrailSeq\n\n        </h1>\n      </header>\n\n       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}